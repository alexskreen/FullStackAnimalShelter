{
  "swagger": "3.0",
  "info": {
    "version": "1.0.0",
    "title": "Animal API",
    "description": "API for an animal shelter.",
    "license": {
      "name": "MIT"
    }
  },
  "schemes": [
    "https"
  ],
  "host": "localhost:5004",
  "basePath": "/api",
  "paths": {
    "/reviews": {
      "get": {
        "summary": "Gets all animals",
        "description": "Returns a list containing all animals in the shelter",
        "security": [],
        "responses": {
          "200": {
            "description": "A list of animals",
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "Destination": {
                    "type": "string"
                  },
                  "City": {
                    "type": "string"
                  },
                  "Country": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "List does not contain any animals"
          }
        }
      },
      "post": {
        "summary": "Adds a new animal to the animals list",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "animal",
            "description": "Animal object that needs to be added to the animals list",
            "required": true,
            "schema": {
              "required": [
                "Name",
                "Type",
                "Breed"
              ],
              "properties": {
                "Name": {
                  "type": "string"
                },
                "Type": {
                  "type": "string"
                },
                "Breed": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Animal successfully added"
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/animals/{id}": {
      "put": {
        "summary": "Update an existing animal",
        "description": "",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "AnimalId of animal to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Animal object to be updated in the animals list",
            "required": true,
            "schema": {
              "required": [
                "Name",
                "Type",
                "Breed"
              ],
              "properties": {
                "Name": {
                  "type": "string"
                },
                "Type": {
                  "type": "string"
                },
                "Breed": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An animal object successfully updated"
          },
          "400": {
            "description": "Invalid ID"
          },
          "404": {
            "description": "Animal not found"
          },
          "500": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Deletes an existing animal",
        "description": "Deletes animal by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "AnimalId of animal to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Animal successfully deleted"
          },
          "400": {
            "description": "Invalid Id"
          },
          "500": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Returns list of all authenticated users",
        "description": "Only authorized users can do this",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully returns list of users"
          },
          "500": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/authenticate": {
      "post": {
        "summary": "Returns token for authenticated user",
        "description": "",
        "security": [],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userParam",
            "description": "user object",
            "required": true,
            "schema": {
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token successfully created",
            "schema": {
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}